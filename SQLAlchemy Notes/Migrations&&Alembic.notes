Alembic is a library for handling schema changes that uses SQLAlchemy to perform migrations in a standardized way. 

Why do we need to use Alembic? 
    SQLAlchemy only creates MISSING tables when we use the create_all() method. It does NOT update tables to match changes we've made to columns or keys. Alembic fixes this by providing classes and methods that will manage schema changes. 

###Creating a Migration Environment
    - alembic init migrations: creates a migration environment
        - typically you will run this command from within the lib directory. This command will create a migrations directory and an alembic.ini file. 
        - the migrations directory 
            -> Within the migrations directory, you'll see the following structure:
                ├── README
                ├── env.py: defines and instantiates the SQLAlchemy engine, connects to the engine, starts a transaction, and calls the migration engine
                ├── script.py.mako: is a template that is used when creating a migration and ultimately defines the basic structure of a migration.
                └── versions: holds migration scripts
        - alembic.ini is a file with configuration options for the environment

###Configuring the Migration Environment
    - since we are using an existing database, we need to change our sqlalchemy.url in alembic.ini from a url to a local .db file. Notice how similar this is to specifying the url for creating an engine
        #alembic.ini
        sqlalchemy.url: sqlite3:///migrations_test.db

    - after creating your models.py file, we need to configure env.py
        Add this line to line 21 in the env.py:
            from models import Base
            target_metadata = Base.metadata

        What this does is, point env.py at and watch the metadata attribute of our declarative_base object. That way, Alembic can use the metadata to compare the structure of the database schema to the models as they are defined in SQLAlchemy.

###Generating a Migration
    - to generate your first migration, make sure your shell is up and running and you are in the /lib file. Then run: alembic revision -m "Empty Init"
    
    - This will create a new migration file in the versions folder, named using the message you provided and the revision id. 

    In the file you should see the following:

    """Empty Init

        Revision ID: b1e27001ed06
        Revises: 
        Create Date: 2023-01-21 08:45:23.469737

        """
        from alembic import op
        import sqlalchemy as sa


        # revision identifiers, used by Alembic.
        revision = 'b1e27001ed06'
        down_revision = None
        branch_labels = None
        depends_on = None


        def upgrade() -> None:
            pass


        def downgrade() -> None:
            pass


        - The upgrade() method includes code that is necessary to change the database based on this migration

        - The downgrade() method includes code that is necessary to undo this migration and return the database to its previous state.

    - Next we can run the following command to generate our database
        alembic upgrade head

        You should see the following in your terminal:
            INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
            INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
            INFO  [alembic.runtime.migration] Running upgrade  -> b1e27001ed06, Empty Init

        This command will upgrade the database to the head, or the newest revision, similar to github! If you have multiple revisions that need to be migrated at the sametime, those revisions will be run in order using the down_revisions as a guide. 
            example:
                INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
                INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
                INFO  [alembic.runtime.migration] Running upgrade d7adc914c0d7 -> 7dca95a6011c, test1
                INFO  [alembic.runtime.migration] Running upgrade 7dca95a6011c -> 7cecc72e8373, test2
                INFO  [alembic.runtime.migration] Running upgrade 7cecc72e8373 -> 6ddca2c9b597, test3

        As you can see the oldest revision, test1, is run first and the newest revision, test3, is run last. Therefore test3 is the current head.

###Autogenerating a migration
    Now that we have our migration base, empty migration, we can add our data model to models.py.

    class Student(Base):
        __tablename__ = 'students'

        id = Column(Integer(), primary_key=True)
        name = Column(String(), index=True)
        email = Column(String(55))
        grade = Column(Integer())
        birthday = Column(DateTime())
        enrolled_date = Column(DateTime(), default=datetime.now())

        def __repr__(self):
            return f"Student {self.id}: " \
                + f"{self.name}, " \
                + f"Grade {self.grade}"

    The interesting thing here is that, since this is a SIMPLE migration, we can actually use Alembic to autogenerate code for us. We have the Students data model. Now we need to add the students table to our database. Let's use Alembic to autogenerate a this create_table migration for us.  
        To generate the migration run, alembic revision ---autogenerate -m "Added Student model"

        You should see the following:
            INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
            INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
            INFO  [alembic.autogenerate.compare] Detected added table 'students'
            INFO  [alembic.autogenerate.compare] Detected added index 'ix_students_name' on '['name']'
            Generating /python-p3-migrations-and-alembic/app/migrations/versions/361dae855898_added_model.py ...  done

        What this command does is, it inspects the metadata of Base in models.py and compares the metadata to the current state of the database. It detects that data model Student was added to models.py and an index was added to the name column. Alembic then generates the necessary migration to reflect the changes. 

        What else happens?
            - a down_revision is added. This points to the id of the previous migration so that if we ever rollback our database, Alembic knows the order of the revisions.
                example:
                    # revision identifiers, used by Alembic.
                    revision = '361dae855898'
                    down_revision = '6b9cb35ba46e'
                    branch_labels = None
                    depends_on = None
            
            - The upgrade() and downgrade() methods are filled out with sqlalchemy orm syntax. Alembic then executes the instructions using its own op class.

        After you run the migration, you should be able to see two tables in your database: 
            alembic_version: stores the migration ID for the current state of the database
            students: table that you created in your model

###Manual Migrations and Downgrades
    While Alembic can do many things, there are several things Alembic needs help with. Those are:
        - Table name changes
        - Column name changes
        - Adding, removing, or changing constraints without explicit names
        - Converting Python data types that are NOT supported by the database

    To help with this, we will write manual migrations and use roll backs to downgrade unnecessary and broken migrations.


##Manual Migration
    - The code below changes the Students table name to scholars. First we'll change the __tablename__ variable and create an empty migration.

        1. class Student(Base):
            __tablename__ = 'scholars'

        2. alembic revision -m "rename students to scholars"

    Now that the migration is made, let's add some code to our upgrade() and downgrade() methods
        3. 
            def upgrade() -> None:
                op.rename_table('students', 'scholar')

            def downgrade() -> None:
                op.rename_table('scholars', students')
    
    Run the migration
        4. alembic upgrade head

##Downgrading Migrations
    - To downgrade a migration, we need to find the ID of the migration in the versions folder that we want to return to. Once you have the id, we can run alembic downgrade <the migration id>. 
    - After you downgrade, make sure to delete the old/unused head from the versions folder. 

What methods are available to the op class? 
What is a down_revision?

Other Notes:
    Commands for the command line:
        - alembic current: checks which migrations have already been applied and returns the ID of the current migration. 
        - alembic history: shows you the full history of migrations to the database