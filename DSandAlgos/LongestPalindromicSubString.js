// Given a string s, return the longest palindromic substring in s.
// A string is called a palindrome string if the reverse of that string is the same as the original string.

 
let longestPalindromicSubstring = (s) => {
    let recursiveCall = (s, start, end, memo={}) => {
        let pos = start + ',' + end
        if (pos in memo) return memo[pos]
        if (start>end) return "" //start and end have crossed
        if (start == end) return s[start] //start and end are on the same element within the string. The palindrome's length is then 1.

        if (s[start] === s[end]) {
            let remainingLength = end - start - 1

            if (remainingLength === recursiveCall(s, start+1, end-1, memo).length) {
                memo[pos] = s.slice(start, end+1)
                return s.slice(start, end+1)
            }
        }

        let c1 = recursiveCall(s, start+1, end, memo) //makes recursive calls to move the start index if none of the above are true
        let c2 = recursiveCall(s, start, end-1, memo) //makes recursive calls to move the end index if none of the above are true

        let longestSubstr = c1.length >= c2.length ? c1 : c2
        memo[pos] = longestSubstr
        return longestSubstr
    }

    //invokes and returns the recursiveCall
    return recursiveCall(s, 0, s.length-1)
}

console.log(longestPalindromicSubstring
//the above gets 94 tests passing. TOO FUCKING SLOW


//solution using isPalindrome and testing all substrings
let longestPalindrome = (s) => {
    let maxPal = ""
    for (let i = 0; i<s.length; i++) {
        for (let j = i+1; j<=s.length; j++) {
            let substr = s.slice(i, j+1)
            if (isPalindrome(substr)) maxPal = substr.length >= maxPal.length ? substr : maxPal
        }
    }
    return maxPal
}

let isPalindrome = (s) => {
    let left = 0, right = s.length - 1
    while (left<=right) {
        if (s[left] != s[right]) return false
        left ++
        right --
    }
    return true
}

console.log(longestPalindrome

//would need to memoize or create a table to solve

time: O(n^3)
space: O(n)